{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { config } from './config';\r\nexport function createPascalColormap() {\r\n    var pascalColormapMaxEntriesNum = config['DATASET_MAX_ENTRIES']['PASCAL'];\r\n    var colormap = new Array(pascalColormapMaxEntriesNum);\r\n    for (var idx = 0; idx < pascalColormapMaxEntriesNum; ++idx) {\r\n        colormap[idx] = new Array(3);\r\n    }\r\n    for (var shift = 7; shift > 4; --shift) {\r\n        var indexShift = 3 * (7 - shift);\r\n        for (var channel = 0; channel < 3; ++channel) {\r\n            for (var idx = 0; idx < pascalColormapMaxEntriesNum; ++idx) {\r\n                colormap[idx][channel] |= ((idx >> (channel + indexShift)) & 1)\r\n                    << shift;\r\n            }\r\n        }\r\n    }\r\n    return colormap;\r\n}\r\nexport function getURL(base, quantizationBytes) {\r\n    return config['BASE_PATH'] + \"/\" + (([1, 2].indexOf(quantizationBytes) !== -1) ?\r\n        \"quantized/\" + quantizationBytes + \"/\" :\r\n        '') + base + \"/model.json\";\r\n}\r\nexport function getColormap(base) {\r\n    if (base === 'pascal') {\r\n        return config['COLORMAPS']['PASCAL'];\r\n    }\r\n    else if (base === 'ade20k') {\r\n        return config['COLORMAPS']['ADE20K'];\r\n    }\r\n    else if (base === 'cityscapes') {\r\n        return config['COLORMAPS']['CITYSCAPES'];\r\n    }\r\n    throw new Error(\"SemanticSegmentation cannot be constructed \" +\r\n        (\"with an invalid base model \" + base + \". \") +\r\n        \"Try one of 'pascal', 'cityscapes' and 'ade20k'.\");\r\n}\r\nexport function getLabels(base) {\r\n    if (base === 'pascal') {\r\n        return config['LABELS']['PASCAL'];\r\n    }\r\n    else if (base === 'ade20k') {\r\n        return config['LABELS']['ADE20K'];\r\n    }\r\n    else if (base === 'cityscapes') {\r\n        return config['LABELS']['CITYSCAPES'];\r\n    }\r\n    throw new Error(\"SemanticSegmentation cannot be constructed \" +\r\n        (\"with an invalid base model \" + base + \". \") +\r\n        \"Try one of 'pascal', 'cityscapes' and 'ade20k'.\");\r\n}\r\nexport function toInputTensor(input) {\r\n    return tf.tidy(function () {\r\n        var image = input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\r\n        var _a = image.shape, height = _a[0], width = _a[1];\r\n        var resizeRatio = config['CROP_SIZE'] / Math.max(width, height);\r\n        var targetHeight = Math.round(height * resizeRatio);\r\n        var targetWidth = Math.round(width * resizeRatio);\r\n        return tf.image.resizeBilinear(image, [targetHeight, targetWidth])\r\n            .expandDims(0);\r\n    });\r\n}\r\nexport function toSegmentationImage(colormap, labelNames, rawSegmentationMap, canvas) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var _a, height, width, segmentationImageBuffer, mapData, labels, columnIndex, rowIndex, label, segmentationImageTensor, segmentationMap, legend, _i, _b, label;\r\n        return tslib_1.__generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    if (colormap.length < labelNames.length) {\r\n                        throw new Error('The colormap must be expansive enough to encode each label. ' +\r\n                            (\"Aborting, since the given colormap has length \" + colormap.length + \", \") +\r\n                            (\"but there are \" + labelNames.length + \" labels.\"));\r\n                    }\r\n                    _a = rawSegmentationMap.shape, height = _a[0], width = _a[1];\r\n                    segmentationImageBuffer = tf.buffer([height, width, 3], 'int32');\r\n                    return [4, rawSegmentationMap.array()];\r\n                case 1:\r\n                    mapData = (_c.sent());\r\n                    labels = new Set();\r\n                    for (columnIndex = 0; columnIndex < height; ++columnIndex) {\r\n                        for (rowIndex = 0; rowIndex < width; ++rowIndex) {\r\n                            label = mapData[columnIndex][rowIndex];\r\n                            labels.add(label);\r\n                            segmentationImageBuffer.set(colormap[label][0], columnIndex, rowIndex, 0);\r\n                            segmentationImageBuffer.set(colormap[label][1], columnIndex, rowIndex, 1);\r\n                            segmentationImageBuffer.set(colormap[label][2], columnIndex, rowIndex, 2);\r\n                        }\r\n                    }\r\n                    segmentationImageTensor = segmentationImageBuffer.toTensor();\r\n                    return [4, tf.browser.toPixels(segmentationImageTensor, canvas)];\r\n                case 2:\r\n                    segmentationMap = _c.sent();\r\n                    tf.dispose(segmentationImageTensor);\r\n                    legend = {};\r\n                    for (_i = 0, _b = Array.from(labels); _i < _b.length; _i++) {\r\n                        label = _b[_i];\r\n                        legend[labelNames[label]] = colormap[label];\r\n                    }\r\n                    return [2, { legend: legend, segmentationMap: segmentationMap }];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=utils.js.map","references":["/Users/krobinson/Documents/github/tensorflow/tfjs-models/deeplab/node_modules/@tensorflow/tfjs-core/dist/index.d.ts","/Users/krobinson/Documents/github/tensorflow/tfjs-models/deeplab/src/config.ts","/Users/krobinson/Documents/github/tensorflow/tfjs-models/deeplab/src/types.ts"],"map":"{\"version\":3,\"file\":\"utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/utils.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/krobinson/Documents/github/tensorflow/tfjs-models/deeplab/utils.d.ts","writeByteOrderMark":false,"text":"import * as tf from '@tensorflow/tfjs-core';\r\nimport { Color, DeepLabInput, ModelArchitecture, QuantizationBytes, SegmentationData } from './types';\r\nexport declare function createPascalColormap(): Color[];\r\nexport declare function getURL(base: ModelArchitecture, quantizationBytes: QuantizationBytes): string;\r\nexport declare function getColormap(base: ModelArchitecture): Color[];\r\nexport declare function getLabels(base: ModelArchitecture): string[];\r\nexport declare function toInputTensor(input: DeepLabInput): tf.Tensor<tf.Rank>;\r\nexport declare function toSegmentationImage(colormap: Color[], labelNames: string[], rawSegmentationMap: tf.Tensor2D, canvas?: HTMLCanvasElement): Promise<SegmentationData>;\r\n"}}
